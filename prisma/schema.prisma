// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OAuthAccount {
  provider          String // Provider
  providerAccountId String @map("provider_account_id")
  userId            String @map("user_id")
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String              @id @default(cuid())
  email          String              @unique
  emailVerified  Boolean             @default(false) @map("email_verified")
  isAdmin        Boolean             @default(false)
  name           String
  iconUrl        String?             @map("icon_url")
  hashedPassword String?             @map("hashed_password")
  passwordSalt   String?             @map("password_salt")
  oauthAccounts  OAuthAccount[]
  sessions       Session[]
  passwordResets PasswordResetToken?
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetToken {
  userId      String   @unique @map("user_id")
  hashedToken String   @unique @map("hashed_token")
  expiresAt   DateTime @map("expires_at")
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Portfolio {
  id              Int                                  @id @default(autoincrement())
  img             String
  title           String
  description     String?                              @db.Text
  content         String?                              @db.Text
  href            String?
  projectLink     String?
  isFeatured      Boolean                              @default(false)
  stacks          PortfolioStack[]
  createdAt       DateTime                             @default(now())
}

model PortfolioStack {
  id              Int                                 @id @default(autoincrement())
  description     String
  stackId         Int
  portfolio       Portfolio                           @relation(fields: [stackId], references: [id], onDelete: Cascade)
}

model Education {
  id              Int                                  @id @default(autoincrement())
  instance        String
  address         String
  date            String
}

model Work {
  id              Int                                 @id @default(autoincrement())
  logo            String
  jobTitle        String
  instance        String
  instanceLink    String
  address         String
  date            String
  responsibilities WorkResponsibility[]
}

model WorkResponsibility {
  id              Int                                 @id @default(autoincrement())
  description     String
  workId          Int
  work            Work                                @relation(fields: [workId], references: [id], onDelete: Cascade)
}
